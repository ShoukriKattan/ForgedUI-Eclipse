/**
 *
 */
package com.forgedui.model.titanium;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.eclipse.draw2d.geometry.Point;
import org.eclipse.ui.views.properties.IPropertyDescriptor;
import org.eclipse.ui.views.properties.PropertyDescriptor;

import com.forgedui.model.property.OffsetPropertySource;
import com.forgedui.model.titanium.TitaniumUIElement.EnumType;
import com.forgedui.model.titanium.annotations.SupportedPlatform;
import com.forgedui.model.titanium.annotations.Unmapped;

/**
 * @AutoGenerated
 */
public class ScrollView extends TitaniumUIContainer {

	@Unmapped
	private static final long serialVersionUID = -8751284346430263249L;
	@Unmapped
	public static final String PROP_ZOOM_SCALE = "zoomScale";
	@Unmapped
	public static final String PROP_H_SCROLL = "horisontalScroll";
	@Unmapped
	public static final String PROP_V_SCROLL = "verticalScroll";
	@Unmapped
	public static final String PROP_SCROLL_TYPE = "scrollType";
	@Unmapped
	public static final String PROP_CONTENT_OFFSET = "contentOffset";
	@Unmapped
	public static final String PROP_CONTENT_WIDTH = "contentWidth";
	@Unmapped
	public static final String PROP_CONTENT_HEIGHT = "contentHeight";

	private Boolean showVerticalScrollIndicator;

	@SupportedPlatform(platforms = "android")
	private ScrollType scrollType;

	private Boolean canCancelEvents;

	private Float zoomScale;

	private Float minZoomScale;

	private Float maxZoomScale;

	private Boolean showHorizontalScrollIndicator;

	private Point contentOffset = new Point(0, 0);

	private Float contentWidth;

	private Float contentHeight;

	private Boolean horizontalBounce;

	private Boolean verticalBounce;

	private Boolean disableBounce;

	public ScrollView() {
		type = "Titanium.UI.ScrollView";
	}

	/**
	 * @param showVerticalScrollIndicator
	 *            the showVerticalScrollIndicator to set
	 */
	public void setShowVerticalScrollIndicator(Boolean showVerticalScrollIndicator) {
		Boolean oldValue = this.showVerticalScrollIndicator;
		this.showVerticalScrollIndicator = showVerticalScrollIndicator;
		listeners.firePropertyChange(PROP_V_SCROLL, oldValue, showVerticalScrollIndicator);
	}

	/**
	 * @return the showVerticalScrollIndicator
	 */
	public Boolean getShowVerticalScrollIndicator() {
		return showVerticalScrollIndicator;
	}

	/**
	 * @param showHorizontalScrollIndicator
	 *            the showHorizontalScrollIndicator to set
	 */
	public void setShowHorizontalScrollIndicator(Boolean showHorizontalScrollIndicator) {
		Boolean oldValue = this.showHorizontalScrollIndicator;
		this.showHorizontalScrollIndicator = showHorizontalScrollIndicator;
		listeners.firePropertyChange(PROP_H_SCROLL, oldValue, showHorizontalScrollIndicator);
	}

	/**
	 * @return the showHorizontalScrollIndicator
	 */
	public Boolean getShowHorizontalScrollIndicator() {
		return showHorizontalScrollIndicator;
	}

	/**
	 * @param zoomScale
	 *            the zoomScale to set
	 */
	public void setZoomScale(Float zoomScale) {
		Float oldZoom = this.zoomScale;
		this.zoomScale = zoomScale;
		listeners.firePropertyChange(PROP_ZOOM_SCALE, oldZoom, zoomScale);
	}

	/**
	 * @return the zoomScale
	 */
	public Float getZoomScale() {
		return zoomScale;
	}

	/**
	 * @return the scrollType
	 */
	public ScrollType getScrollType() {
		return scrollType;
	}

	/**
	 * @param scrollType
	 *            the scrollType to set
	 */
	public void setScrollType(ScrollType scrollType) {
		ScrollType oldValue = this.scrollType;
		this.scrollType = scrollType;
		listeners.firePropertyChange(PROP_SCROLL_TYPE, oldValue, scrollType);
	}

	/**
	 * @return the minZoomScale
	 */
	public Float getMinZoomScale() {
		return minZoomScale;
	}

	/**
	 * @param minZoomScale
	 *            the minZoomScale to set
	 */
	public void setMinZoomScale(Float minZoomScale) {
		this.minZoomScale = minZoomScale;
	}

	/**
	 * @return the canCancelEvents
	 */
	public Boolean getCanCancelEvents() {
		return canCancelEvents;
	}

	/**
	 * @param canCancelEvents
	 *            the canCancelEvents to set
	 */
	public void setCanCancelEvents(Boolean canCancelEvents) {
		this.canCancelEvents = canCancelEvents;
	}

	/**
	 * @return the contentOffset
	 */
	public Point getContentOffset() {
		return contentOffset;
	}

	/**
	 * @param contentOffset
	 *            the contentOffset to set
	 */
	public void setContentOffset(Point contentOffset) {
		this.contentOffset = contentOffset;
	}

	/**
	 * @return the horizontalBounce
	 */
	public Boolean getHorizontalBounce() {
		return horizontalBounce;
	}

	/**
	 * @param horizontalBounce
	 *            the horizontalBounce to set
	 */
	public void setHorizontalBounce(Boolean horizontalBounce) {
		this.horizontalBounce = horizontalBounce;
	}

	/**
	 * @return the contentWidth
	 */
	public Float getContentWidth() {
		return contentWidth;
	}

	/**
	 * @param contentWidth
	 *            the contentWidth to set
	 */
	public void setContentWidth(Float contentWidth) {
		Float oldContentWidth = this.contentWidth;
		this.contentWidth = contentWidth;
		listeners.firePropertyChange(PROP_CONTENT_WIDTH, oldContentWidth, contentWidth);
	}

	/**
	 * @return the contentHeight
	 */
	public Float getContentHeight() {
		return contentHeight;
	}

	/**
	 * @param contentHeight
	 *            the contentHeight to set
	 */
	public void setContentHeight(Float contentHeight) {
		Float oldContentHeight = this.contentHeight;
		this.contentHeight = contentHeight;
		listeners.firePropertyChange(PROP_CONTENT_HEIGHT, oldContentHeight, contentHeight);
	}

	/**
	 * @return the maxZoomScale
	 */
	public Float getMaxZoomScale() {
		return maxZoomScale;
	}

	/**
	 * @param maxZoomScale
	 *            the maxZoomScale to set
	 */
	public void setMaxZoomScale(Float maxZoomScale) {
		this.maxZoomScale = maxZoomScale;
	}

	/**
	 * @return the verticalBounce
	 */
	public Boolean getVerticalBounce() {
		return verticalBounce;
	}

	/**
	 * @param verticalBounce
	 *            the verticalBounce to set
	 */
	public void setVerticalBounce(Boolean verticalBounce) {
		this.verticalBounce = verticalBounce;
	}

	/**
	 * @return the disableBounce
	 */
	public Boolean getDisableBounce() {
		return disableBounce;
	}

	/**
	 * @param disableBounce
	 *            the disableBounce to set
	 */
	public void setDisableBounce(Boolean disableBounce) {
		this.disableBounce = disableBounce;
	}

	@Override
	public IPropertyDescriptor[] getPropertyDescriptors() {
		List<IPropertyDescriptor> fullList = new ArrayList<IPropertyDescriptor>();
		fullList.addAll(Arrays.asList(super.getPropertyDescriptors()));
		fullList.add(new PropertyDescriptor(PROP_CONTENT_OFFSET, PROP_CONTENT_OFFSET));

		return fullList.toArray(new IPropertyDescriptor[fullList.size()]);
	}

	@Override
	public Object getPropertyValue(Object propertyId) {
		if (PROP_CONTENT_OFFSET.equals(propertyId)) {
			return new OffsetPropertySource(this);
		}
		return super.getPropertyValue(propertyId);
	}
	
	public static enum ScrollType implements EnumType{
		vertical, horizontal;
		
		public String getQDN() {
			return super.toString();
		};
	}


}