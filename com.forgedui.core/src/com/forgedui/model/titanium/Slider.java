/**
 *
 */
package com.forgedui.model.titanium;

import java.lang.reflect.Field;

import org.eclipse.jface.viewers.ICellEditorValidator;

import com.forgedui.model.titanium.annotations.SupportedPlatform;
import com.forgedui.model.titanium.annotations.Unmapped;

/**
 * @AutoGenerated
 */
public class Slider extends TitaniumUIContainer {

	@Unmapped
	public static final String PROP_MIN = "min";
	@Unmapped
	public static final String PROP_MAX = "max";
	@Unmapped
	public static final String PROP_MIN_RANGE = "minRange";
	@Unmapped
	public static final String PROP_MAX_RANGE = "maxRange";
	@Unmapped
	public static final String PROP_VALUE = "value";
	@Unmapped
	public static final String PROP_THUMB_IMAGE = "thumbImage";
	@Unmapped
	public static final String PROP_LEFT_TRACK_IMAGE = "leftTrackImage";
	@Unmapped
	public static final String PROP_RIGHT_TRACK_IMAGE = "rightTrackImage";
	@Unmapped
	public static final String PROP_SELECTED_THUMB_IMAGE = "selectedThumbImage";
	@Unmapped
	public static final String PROP_SELECTED_LEFT_TRACK_IMAGE = "selectedLeftTrackImage";
	@Unmapped
	public static final String PROP_SELECTED_RIGHT_TRACK_IMAGE = "selectedRightTrackImage";
	@Unmapped
	public static final String PROP_DISABLED_THUMB_IMAGE = "disabledThumbImage";
	@Unmapped
	public static final String PROP_DISABLED_LEFT_TRACK_IMAGE = "disabledLeftTrackImage";
	@Unmapped
	public static final String PROP_DISABLED_RIGHT_TRACK_IMAGE = "disabledRightTrackImage";
	@Unmapped
	public static final String PROP_HIGHLIGHTED_THUMB_IMAGE = "highlightedThumbImage";
	@Unmapped
	public static final String PROP_HIGHLIGHTED_LEFT_TRACK_IMAGE = "highlightedLeftTrackImage";
	@Unmapped
	public static final String PROP_HIGHLIGHTED_RIGHT_TRACK_IMAGE = "highlightedRightTrackImage";

	/**
	 * 
	 */
	@Unmapped
	private static final long serialVersionUID = 1L;

	private Float value;

	private Boolean enabled;

	private Float min;

	private Float max;

	@SupportedPlatform(platforms = "android")
	private Float minRange;
	@SupportedPlatform(platforms = "android")
	private Float maxRange;

	private String thumbImage;

	private String leftTrackImage;

	private String rightTrackImage;

	private String selectedThumbImage;

	private String selectedLeftTrackImage;

	private String selectedRightTrackImage;

	private String disabledThumbImage;

	private String disabledLeftTrackImage;

	private String disabledRightTrackImage;

	private String highlightedThumbImage;

	private String highlightedLeftTrackImage;

	private String highlightedRightTrackImage;

	private transient ICellEditorValidator minValidator;

	private void setMinValidator() {
		this.minValidator = new ICellEditorValidator() {
			@Override
			public String isValid(Object min) {
				if (min != null) {
					if ((max != null && (Float) min > max)) {
						return "Min can't be bigger than max";
					} else if (minRange != null && (Float) min > minRange) {
						return "Min can't be bigger than maxRange";
					} else if (maxRange != null && (Float) min > maxRange) {
						return "Min can't be bigger than maxRange";
					} else if (value != null && (Float) min > value) {
						return "Min can't be bigger than value";
					}
				}
				return null;
			}
		};
	}

	private transient ICellEditorValidator maxValidator;

	private void setMaxValidator() {
		this.maxValidator = new ICellEditorValidator() {
			@Override
			public String isValid(Object max) {
				if (max != null) {
					if (min != null && (Float) max < min) {
						return "Max can't be smaller than maxRange";
					} else if (maxRange != null && (Float) max < maxRange) {
						return "Max can't be smaller than maxRange";
					} else if (minRange != null && (Float) max < minRange) {
						return "Max can't be smaller than minRange";
					} else if (value != null && (Float) max < value) {
						return "Max can't be smaller than value";
					}
				}
				return null;
			}
		};
	}
	
	private transient ICellEditorValidator minRangeValidator;

	private void setMinRangeValidator() {
		this.minRangeValidator = new ICellEditorValidator() {
			@Override
			public String isValid(Object minRange) {
				if (minRange != null) {
					if ((min != null && (Float) minRange < min)) {
						return "MinRange can't be smaller than min";
					} else if ((max != null && (Float) minRange > max)) {
						return "MinRange can't be bigger than max";
					} else if (value != null && (Float) minRange > value) {
						return "MinRange can't be bigger than value";
					} else if (maxRange != null && (Float) minRange > maxRange) {
						return "MinRange can't be bigger than maxRange";
					}
				}
				return null;
			}
		};
	}

	private transient ICellEditorValidator maxRangeValidator;

	private void setMaxRangeValidator() {
		this.maxRangeValidator = new ICellEditorValidator() {
			@Override
			public String isValid(Object maxRange) {
				if (maxRange != null) {
					if (min != null && (Float) maxRange < min) {
						return "MaxRange can't be smaller than min";
					} else if (max != null && (Float) maxRange > max) {
						return "MaxRange can't be bigger than max";
					} else if (minRange != null && (Float) maxRange < minRange) {
						return "MaxRange can't be smaller than minRange";
					} else if (value != null && (Float) maxRange < value) {
						return "MaxRange can't be smaller than value";
					}
				}
				return null;
			}
		};
	}

	private transient ICellEditorValidator valueValidator;

	private void setValueValidator() {
		this.valueValidator = new ICellEditorValidator() {
			@Override
			public String isValid(Object value) {
				if (value != null) {
					if (minRange != null && (Float) value < minRange) {
						return "Value can't be smaller than minRange";
					} else if (maxRange != null && (Float) value > maxRange) {
						return "Value can't be bigger than maxRange";
					} else if (minRange == null && min != null && (Float) value < min) {
						return "Value can't be smaller than min";
					} else if (maxRange == null && max != null && (Float) value > max) {
						return "Value can't be bigger than max";
					}
				}
				return null;
			}
		};
	}

	public Slider() {
		type = "Titanium.UI.Slider";
		setMinValidator();
		setMaxValidator();
		setMinRangeValidator();
		setMaxRangeValidator();
		setValueValidator();
	}

	@Override
	protected boolean isImageFieldName(String fieldName) {
		boolean res = false;
		if (PROP_THUMB_IMAGE.equals(fieldName) || PROP_LEFT_TRACK_IMAGE.equals(fieldName)
				|| PROP_RIGHT_TRACK_IMAGE.equals(fieldName) || PROP_SELECTED_THUMB_IMAGE.equals(fieldName)
				|| PROP_SELECTED_LEFT_TRACK_IMAGE.equals(fieldName)
				|| PROP_SELECTED_RIGHT_TRACK_IMAGE.equals(fieldName) || PROP_DISABLED_THUMB_IMAGE.equals(fieldName)
				|| PROP_DISABLED_LEFT_TRACK_IMAGE.equals(fieldName)
				|| PROP_DISABLED_RIGHT_TRACK_IMAGE.equals(fieldName) || PROP_HIGHLIGHTED_THUMB_IMAGE.equals(fieldName)
				|| PROP_HIGHLIGHTED_LEFT_TRACK_IMAGE.equals(fieldName)
				|| PROP_HIGHLIGHTED_RIGHT_TRACK_IMAGE.equals(fieldName)) {
			res = true;
		}
		if (!res) {
			res = super.isImageFieldName(fieldName);
		}
		return res;
	}

	/**
	 * @return the enabled
	 */
	public Boolean getEnabled() {
		return enabled;
	}

	/**
	 * @param enabled
	 *            the enabled to set
	 */
	public void setEnabled(Boolean enabled) {
		this.enabled = enabled;
	}

	/**
	 * @return the thumbImage
	 */
	public String getThumbImage() {
		return thumbImage;
	}

	/**
	 * @param thumbImage
	 *            the thumbImage to set
	 */
	public void setThumbImage(String thumbImage) {
		this.thumbImage = thumbImage;
	}

	/**
	 * @return the leftTrackImage
	 */
	public String getLeftTrackImage() {
		return leftTrackImage;
	}

	/**
	 * @param leftTrackImage
	 *            the leftTrackImage to set
	 */
	public void setLeftTrackImage(String leftTrackImage) {
		this.leftTrackImage = leftTrackImage;
	}

	/**
	 * @return the rightTrackImage
	 */
	public String getRightTrackImage() {
		return rightTrackImage;
	}

	/**
	 * @param rightTrackImage
	 *            the rightTrackImage to set
	 */
	public void setRightTrackImage(String rightTrackImage) {
		this.rightTrackImage = rightTrackImage;
	}

	/**
	 * @return the selectedThumbImage
	 */
	public String getSelectedThumbImage() {
		return selectedThumbImage;
	}

	/**
	 * @param selectedThumbImage
	 *            the selectedThumbImage to set
	 */
	public void setSelectedThumbImage(String selectedThumbImage) {
		this.selectedThumbImage = selectedThumbImage;
	}

	/**
	 * @return the selectedLeftTrackImage
	 */
	public String getSelectedLeftTrackImage() {
		return selectedLeftTrackImage;
	}

	/**
	 * @param selectedLeftTrackImage
	 *            the selectedLeftTrackImage to set
	 */
	public void setSelectedLeftTrackImage(String selectedLeftTrackImage) {
		this.selectedLeftTrackImage = selectedLeftTrackImage;
	}

	/**
	 * @return the selectedRightTrackImage
	 */
	public String getSelectedRightTrackImage() {
		return selectedRightTrackImage;
	}

	/**
	 * @param selectedRightTrackImage
	 *            the selectedRightTrackImage to set
	 */
	public void setSelectedRightTrackImage(String selectedRightTrackImage) {
		this.selectedRightTrackImage = selectedRightTrackImage;
	}

	/**
	 * @return the disabledThumbImage
	 */
	public String getDisabledThumbImage() {
		return disabledThumbImage;
	}

	/**
	 * @param disabledThumbImage
	 *            the disabledThumbImage to set
	 */
	public void setDisabledThumbImage(String disabledThumbImage) {
		this.disabledThumbImage = disabledThumbImage;
	}

	/**
	 * @return the disabledLeftTrackImage
	 */
	public String getDisabledLeftTrackImage() {
		return disabledLeftTrackImage;
	}

	/**
	 * @param disabledLeftTrackImage
	 *            the disabledLeftTrackImage to set
	 */
	public void setDisabledLeftTrackImage(String disabledLeftTrackImage) {
		this.disabledLeftTrackImage = disabledLeftTrackImage;
	}

	/**
	 * @return the disabledRightTrackImage
	 */
	public String getDisabledRightTrackImage() {
		return disabledRightTrackImage;
	}

	/**
	 * @param disabledRightTrackImage
	 *            the disabledRightTrackImage to set
	 */
	public void setDisabledRightTrackImage(String disabledRightTrackImage) {
		this.disabledRightTrackImage = disabledRightTrackImage;
	}

	/**
	 * @return the highlightedThumbImage
	 */
	public String getHighlightedThumbImage() {
		return highlightedThumbImage;
	}

	/**
	 * @param highlightedThumbImage
	 *            the highlightedThumbImage to set
	 */
	public void setHighlightedThumbImage(String highlightedThumbImage) {
		this.highlightedThumbImage = highlightedThumbImage;
	}

	/**
	 * @return the highlightedLeftTrackImage
	 */
	public String getHighlightedLeftTrackImage() {
		return highlightedLeftTrackImage;
	}

	/**
	 * @param highlightedLeftTrackImage
	 *            the highlightedLeftTrackImage to set
	 */
	public void setHighlightedLeftTrackImage(String highlightedLeftTrackImage) {
		this.highlightedLeftTrackImage = highlightedLeftTrackImage;
	}

	/**
	 * @return the highlightedRightTrackImage
	 */
	public String getHighlightedRightTrackImage() {
		return highlightedRightTrackImage;
	}

	/**
	 * @param highlightedRightTrackImage
	 *            the highlightedRightTrackImage to set
	 */
	public void setHighlightedRightTrackImage(String highlightedRightTrackImage) {
		this.highlightedRightTrackImage = highlightedRightTrackImage;
	}

	/**
	 * @return the max
	 */
	public Float getMax() {
		return max;
	}

	/**
	 * @param max
	 *            the max to set
	 */
	public void setMax(Float max) {
		Float old = this.max;
		this.max = max;
		listeners.firePropertyChange(PROP_MAX, old, max);
	}

	/**
	 * @return the min
	 */
	public Float getMin() {
		return min;
	}

	/**
	 * @param min
	 *            the min to set
	 */
	public void setMin(Float min) {
		Float old = this.min;
		this.min = min;
		listeners.firePropertyChange(PROP_MIN, old, min);
	}

	/**
	 * @return the value
	 */
	public Float getValue() {
		return value;
	}

	/**
	 * @param value
	 *            the value to set
	 */
	public void setValue(Float value) {
		Float old = this.value;
		this.value = value;
		listeners.firePropertyChange(PROP_VALUE, old, value);
	}

	/**
	 * @return the maxRange
	 */
	public Float getMaxRange() {
		return maxRange;
	}

	/**
	 * @param maxRange
	 *            the maxRange to set
	 */
	public void setMaxRange(Float maxRange) {
		Float old = this.maxRange;
		this.maxRange = maxRange;
		listeners.firePropertyChange(PROP_MAX_RANGE, old, maxRange);
	}

	/**
	 * @return the minRange
	 */
	public Float getMinRange() {
		return minRange;
	}

	/**
	 * @param minRange
	 *            the minRange to set
	 */
	public void setMinRange(Float minRange) {
		Float old = this.minRange;
		this.minRange = minRange;
		listeners.firePropertyChange(PROP_MIN_RANGE, old, minRange);
	}
	
	@Override
	protected ICellEditorValidator getFieldValidator(Field f) {
		String fieldName = f.getName();
		if (fieldName.equals(PROP_MIN)){
			return minValidator;
		} else if (fieldName.equals(PROP_MAX)){
			return maxValidator;
		} else if (fieldName.equals(PROP_MIN_RANGE)){
			return minRangeValidator;
		} else if (fieldName.equals(PROP_MAX_RANGE)){
			return maxRangeValidator;
		} else if (fieldName.equals(PROP_VALUE)){
			return valueValidator;
		}
		return super.getFieldValidator(f);
	}

	/**
	 * Xstream uses same serialization mechanism as Java standard object
	 * serialization, hence constructors do not get called SEE FAQ :
	 * http://xstream.codehaus.org/faq.html#Serialization
	 * 
	 * @return
	 */
	private Object readResolve() {
		if (this.minValidator == null) {
			setMinValidator();
		}
		if (this.maxValidator == null) {
			setMaxValidator();
		}
		if (this.minRangeValidator == null) {
			setMinRangeValidator();
		}
		if (this.maxRangeValidator == null) {
			setMaxRangeValidator();
		}
		if (this.valueValidator == null) {
			setValueValidator();
		}
		return this;
	}
}