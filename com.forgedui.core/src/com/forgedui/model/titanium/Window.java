/**
 *
 */
package com.forgedui.model.titanium;

import com.forgedui.model.Element;
import com.forgedui.model.titanium.annotations.Composite;
import com.forgedui.model.titanium.annotations.EnumValues;
import com.forgedui.model.titanium.annotations.Review;
import com.forgedui.model.titanium.annotations.SupportedPlatform;
import com.forgedui.model.titanium.annotations.Unmapped;

/**
 * @AutoGenerated
 */
public class Window extends TitaniumUIContainer {

	/**
	 * 
	 */
	@Unmapped
	private static final long serialVersionUID = 1L;
	@Unmapped
	public static final String ORIENTATION_MODE_FACE_DOWN = "Titanium.UI.FACE_DOWN";
	@Unmapped
	public static final String ORIENTATION_MODE_FACE_UP = "Titanium.UI.FACE_UP";
	@Unmapped
	public static final String ORIENTATION_MODE_PORTRAIT = "Titanium.UI.PORTRAIT";
	@Unmapped
	public static final String ORIENTATION_MODE_UPSIDE_PORTRAIT = "Titanium.UI.UPSIDE_PORTRAIT";
	@Unmapped
	public static final String ORIENTATION_MODE_UNKNOWN = "Titanium.UI.UNKNOWN";
	@Unmapped
	public static final String ORIENTATION_MODE_LANDSCAPE_LEFT = "Titanium.UI.LANDSCAPE_LEFT";
	@Unmapped
	public static final String ORIENTATION_MODE_LANDSCAPE_RIGHT = "Titanium.UI.LANDSCAPE_RIGHT";
	@Unmapped
	public static final String MODAL_PROP = "modal";
	@Unmapped
	public static final String TITLE_BAR_PROP = "titleBar";
	@Unmapped
	public static final String TABS_HIDDEN_PROP = "tabsGroupHidden";
	@Unmapped
	public static final String FULL_SCREEN_PROP = "fullScreen";
	@Unmapped
	public static final String ORIENTATION_MODES_PROP = "orientationModes";

	private Boolean exitOnClose;

	private Boolean tabBarHidden;

	private Boolean navBarHidden;

	@Review(note = "What is the highest class in hierarchy for this")
	@SupportedPlatform(platforms = "iphone")
	private TitaniumUIBoundedElement[] toolbar;

	private Boolean translucent;

	private String url;

	@EnumValues(values = { "Titanium.UI.FACE_DOWN", "Titanium.UI.FACE_UP",
			"Titanium.UI.LANDSCAPE_LEFT", "Titanium.UI.LANDSCAPE_RIGHT",
			"Titanium.UI.PORTRAIT", "Titanium.UI.UNKNOWN",
			"Titanium.UI.UPSIDE_PORTRAIT" }, type = "integer")
	private String[] orientationModes;
	private Boolean fullscreen;

	@Composite
	private TitleBar titleBar;

	private Boolean modal;

	public Window() {
		this.type = "Titanium.UI.Window";
	}

	public Boolean getExitOnClose() {
		return exitOnClose;
	}

	public void setExitOnClose(Boolean exitOnClose) {
		this.exitOnClose = exitOnClose;
	}

	public Boolean getTabBarHidden() {
		return tabBarHidden;
	}

	public void setTabBarHidden(Boolean tabBarHidden) {
		Boolean old = this.tabBarHidden;
		this.tabBarHidden = tabBarHidden;
		listeners.firePropertyChange(TABS_HIDDEN_PROP, old, tabBarHidden);
	}

	public Boolean getNavBarHidden() {
		return navBarHidden;
	}

	public void setNavBarHidden(Boolean navBarHidden) {
		this.navBarHidden = navBarHidden;
	}

	public TitaniumUIBoundedElement[] getToolbar() {
		return toolbar;
	}

	public void setToolbar(TitaniumUIBoundedElement[] toolbar) {
		TitaniumUIBoundedElement[] oldToolbar = toolbar;
		if (toolbar != null){
			for (TitaniumUIBoundedElement titaniumUIElement : toolbar) {
				titaniumUIElement.setParent(null);
			}
		}
		this.toolbar = oldToolbar;
		if (toolbar != null){
			for (TitaniumUIBoundedElement titaniumUIElement : toolbar) {
				titaniumUIElement.setParent(this);
			}
		}
		listeners.firePropertyChange("Window.toolbar", oldToolbar, oldToolbar);
	}

	public Boolean getTranslucent() {
		return translucent;
	}

	public void setTranslucent(Boolean translucent) {
		this.translucent = translucent;
	}

	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public String[] getOrientationModes() {
		return orientationModes;
	}

	public void setOrientationModes(String[] orientationModes) {
		this.orientationModes = orientationModes;
	}

	public Boolean getFullscreen() {
		return fullscreen;
	}

	public void setFullscreen(Boolean fullscreen) {
		Boolean old = this.fullscreen;
		this.fullscreen = fullscreen;
		listeners.firePropertyChange(FULL_SCREEN_PROP, old, fullscreen);
	}

	public Boolean getModal() {
		return modal;
	}

	public void setModal(Boolean modal) {
		Boolean oldValue = this.modal;
		this.modal = modal;
		listeners.firePropertyChange(MODAL_PROP, oldValue, modal);
	}

	public void setTitleBar(TitleBar titleBar) {
		TitleBar oldTitleBar = this.titleBar;
		this.titleBar = titleBar;
		fireElementPropertySet(TITLE_BAR_PROP, oldTitleBar, titleBar);
	}

	public TitleBar getTitleBar() {
		return titleBar;
	}
	
	@Override
	public void setParent(Element parent) {
		this.parent = parent;
		if (parent != null && name == null){
			String fileName = getDiagram().getFile().getName();
			if (fileName.indexOf('.') >= 0){
				fileName = fileName.substring(0, fileName.indexOf('.'));
			}
			setName(fileName);
		}
	}

}