/**
 *
 */
package com.forgedui.model.titanium;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.eclipse.ui.views.properties.IPropertyDescriptor;

import com.forgedui.model.property.IntegerPropertyDescriptor;
import com.forgedui.model.property.MinmaxValidator;
import com.forgedui.model.property.NumberCellEditor;
import com.forgedui.model.property.NumberPropertyDescriptor;
import com.forgedui.model.titanium.annotations.Unmapped;
import com.forgedui.util.Utils;

/**
 * @AutoGenerated
 */
public class TabbedBar extends TitaniumUIContainer {
	
	/**
	 * 
	 */
	@Unmapped
	private static final long serialVersionUID = 5986369027066768941L;

	@Unmapped
	private static final String PROP_BUTTONS_COUNT = "buttons count";

	@Unmapped
	public static final String PROP_INDEX = "index";
	
	private Integer index = -1;
	
	private Integer style;
	
	
	public TabbedBar() {
		type="Titanium.UI.TabbedBar";
	}
	
	protected String getObjectName(){
		return "Titanium.UI.TabbedBar";
	}
	
	@Override
	public void initDefaults() {
		super.initDefaults();
		setButtonsNumber(2);//init with 2 buttons by default
		setIndex(0);
		setOpacity(0.0f);
	}
	
	public List<? extends TabbedBarButton> getChildren() {
		return (List<? extends TabbedBarButton>) super.getChildren();
	}

	public void setButtonsNumber(int num){
		for (int i = children.size() - 1; i >= num; i--) {
			if(i > 0)
				((TabbedBarButton)children.get(i-1)).setLast(true);
			removeChild(children.get(i));
		}	
		for (int i = children.size(); children.size() < num; i++) {
			if(i > 0)
				((TabbedBarButton)children.get(i-1)).setLast(false);
			addChild(new TabbedBarButton(i==0,true,"Tab"));
		}
	}
	
	public int getButtonsNumber(){
		return children.size();
	}

	@Override
	public IPropertyDescriptor[] getPropertyDescriptors() {
		List<IPropertyDescriptor> fullList = new ArrayList<IPropertyDescriptor>();
		fullList.addAll(Arrays.asList(super.getPropertyDescriptors()));
		NumberPropertyDescriptor npd1 = new NumberPropertyDescriptor(PROP_BUTTONS_COUNT, PROP_BUTTONS_COUNT,
				NumberCellEditor.INTEGER, false);
		npd1.setValidator( new MinmaxValidator(1, 10));
		fullList.add(npd1);
		
		IntegerPropertyDescriptor pd=null;
		for (IPropertyDescriptor iPropertyDescriptor : fullList) {
			if(PROP_INDEX.equals(iPropertyDescriptor.getDisplayName())){
				pd = (IntegerPropertyDescriptor)iPropertyDescriptor;
				break;
			}
		}
		fullList.remove(fullList.indexOf(pd));
		NumberPropertyDescriptor npd2 = new NumberPropertyDescriptor(pd.getId(), PROP_INDEX,NumberCellEditor.INTEGER, false);
		npd2.setValidator( new MinmaxValidator(0, getButtonsNumber()-1));
		fullList.add(npd2);

		return fullList.toArray(new IPropertyDescriptor[fullList.size()]);
	}
	
	@Override
	public Object getPropertyValue(Object propertyId) {
		if (PROP_BUTTONS_COUNT.equals(propertyId)){
			return "" + getButtonsNumber();
		}
		return super.getPropertyValue(propertyId);
	}
	
	@Override
	public void setPropertyValue(Object propertyId, Object value) {
		if (PROP_BUTTONS_COUNT.equals(propertyId)){
			setButtonsNumber((value == null?0:(Integer)value));
			if(getIndex()>= getButtonsNumber())
				setIndex(getButtonsNumber()-1);
		}else if(propertyId instanceof Field && PROPERTY_OPACITY.equals(((Field)propertyId).getName())){
			super.setPropertyValue(propertyId, 0.0f);
		}else {
			super.setPropertyValue(propertyId, value);
		}
	}

	@Override
	public void resetPropertyValue(Object id) {
		if (id instanceof Field && PROP_INDEX.equals(((Field)id).getName())){
			setIndex(0);
		} else if (PROP_BUTTONS_COUNT.equals(id)){
			setPropertyValue(id,2);
		}else {
			super.resetPropertyValue(id);
		}
	}
	
	/**
	 * @param index the index to set
	 */
	public void setIndex(Integer index) {
		Integer oldValue = this.index;
		this.index = index;
		listeners.firePropertyChange(PROP_INDEX, oldValue, index);
		if (index == null){
			index = -1;
		}
		for (int i = 0; i < children.size(); i++) {
			((TabbedBarButton)children.get(i)).setSelected(i == index);
		}
	}

	/**
	 * @return the index
	 */
	public Integer getIndex() {
		return index;
	}
	
	/**
	 * @return the style
	 */
	public Integer getStyle() {
		return style;
	}

	/**
	 * @param style the style to set
	 */
	public void setStyle(Integer style) {
		this.style = style;
	}
	
	public void updateSelection(TabbedBarButton button){
		int index = getButtonIndex(button);
		if (Utils.getBoolean(button.getSelected(), false)){
			setIndex(index);
		} else {
			if (Utils.getInt(getIndex(), -1) == index){
				setIndex(null);
			}
		}
	}
	
	protected int getButtonIndex(TabbedBarButton button){
		for (int i = 0; i < children.size(); i++) {
			if (children.get(i) == button){
				return i;
			}
		}
		return -1;
	}
}