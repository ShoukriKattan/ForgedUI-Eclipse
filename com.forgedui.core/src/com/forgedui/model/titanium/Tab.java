/**
 *
 */
package com.forgedui.model.titanium;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.eclipse.ui.views.properties.ComboBoxPropertyDescriptor;
import org.eclipse.ui.views.properties.IPropertyDescriptor;

import com.forgedui.model.Diagram;
import com.forgedui.model.titanium.annotations.Reference;
import com.forgedui.model.titanium.annotations.Unmapped;

/**
 * @AutoGenerated
 */
public class Tab extends TitaniumUIElement {

	/**
	 * 
	 */
	@Unmapped
	private static final long serialVersionUID = 1L;
	@Unmapped
	public static final String TITLE_PROP = "Tab.title";
	@Unmapped
	public static final String WINDOW_PROP = "Tab.window";
	@Unmapped
	public static final String ICON_PROP = "icon";
	@Unmapped
	public static final String BADGE_PROP = "badge";

	private String icon;

	private String title;
	@Reference
	private String window;

	/**
	 * @return the window
	 */
	public String getWindow() {
		return window;
	}

	/**
	 * @param window
	 *            the window to set
	 */
	public void setWindow(String window) {
		String oldwindow = this.window;
		this.window = window;
		listeners.firePropertyChange(WINDOW_PROP, oldwindow, window);
	}

	private String badge;

	public Tab() {
		type = "Titanium.UI.Tab";
	}

	@Override
	public void setName(String name) {
		String oldName = getName();
		super.setName(name);
		if (oldName == null) {
			setTitle(name);
		}
	}

	/**
	 * @param title
	 *            the title to set
	 */
	public void setTitle(String title) {
		String oldTitle = this.title;
		this.title = title;
		listeners.firePropertyChange(TITLE_PROP, oldTitle, title);
	}

	/**
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	@Override
	public IPropertyDescriptor[] getPropertyDescriptors() {
		List<IPropertyDescriptor> fullList = new ArrayList<IPropertyDescriptor>();
		fullList.addAll(Arrays.asList(super.getPropertyDescriptors()));
		fullList.add(new ComboBoxPropertyDescriptor("window", "window", getAwailableWindows()));

		return fullList.toArray(new IPropertyDescriptor[fullList.size()]);
	}

	private String[] getAwailableWindows() {
		List<String> windowNames = new ArrayList<String>();
		windowNames.add("");// not assigned
		Collection<Diagram> diagrams = getDiagram().getProjectDiagrams();
		if (diagrams != null) {
			for (Diagram diagram : diagrams) {
				if (diagram.getScreen().getWindow() != null) {
					windowNames.add(diagram.getScreen().getWindow().getName());
				}
			}
		}
		return windowNames.toArray(new String[windowNames.size()]);
	}

	@Override
	public Object getPropertyValue(Object propertyId) {
		if ("window".equals(propertyId)) {
			if (window == null) {
				return -1;
			}
			String[] wondows = getAwailableWindows();
			for (int i = 0; i < wondows.length; i++) {
				if (window.equals(wondows[i])) {
					return i;
				}
			}
			return -1;
		} else
			return super.getPropertyValue(propertyId);
	}

	@Override
	public void setPropertyValue(Object propertyId, Object value) {
		if ("window".equals(propertyId)) {
			if (value instanceof Integer && (Integer) value > 0) {
				setWindow(getAwailableWindows()[(Integer) value]);
			} else {
				setWindow(null);
				;
			}
		} else
			super.setPropertyValue(propertyId, value);
	}

	/**
	 * @return the icon
	 */
	public String getIcon() {
		return icon;
	}

	/**
	 * @param icon
	 *            the icon to set
	 */
	public void setIcon(String icon) {
		String old = this.icon;
		this.icon = icon;
		listeners.firePropertyChange(ICON_PROP, old, icon);
	}

	/**
	 * @return the badge
	 */
	public String getBadge() {
		return badge;
	}

	/**
	 * @param badge
	 *            the badge to set
	 */
	public void setBadge(String badge) {
		String old = this.badge;
		this.badge = badge;
		listeners.firePropertyChange(BADGE_PROP, old, badge);
	}

	protected boolean isImageFieldName(String fieldName) {
		if (ICON_PROP.equals(fieldName)) {
			return true;
		}
		return super.isImageFieldName(fieldName);
	}

}