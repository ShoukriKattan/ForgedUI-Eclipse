/**
 *
 */
package com.forgedui.model.titanium;

import java.lang.reflect.Field;
import java.util.ArrayList;

import org.eclipse.ui.views.properties.ComboBoxPropertyDescriptor;
import org.eclipse.ui.views.properties.IPropertyDescriptor;

import com.forgedui.model.titanium.annotations.EnumValues;
import com.forgedui.model.titanium.annotations.Review;
import com.forgedui.model.titanium.annotations.Unmapped;

/**
 * @AutoGenerated
 * 
 *                TODO: this bitch can actually hold a label So maybe it should
 *                be a container not a base UI element
 */
public class Button extends TitaniumUIElement {

	@Unmapped
	public static final String TITLE = "title";
	@Unmapped
	public static final String TITLE_ID = "titleid";
	@Unmapped
	public static final String COLOR = "color";
	@Unmapped
	public static final String SELECTED_COLOR = "selectedColor";
	@Unmapped
	public static final String STYLE = "style";
	@Unmapped
	public static final String ENABLED = "enabled";
	@Unmapped
	public static final String IMAGE = "image";
	@Unmapped
	public static final String PREFIX = "Button";
	/**
	 * 
	 */
	@Unmapped
	private static final long serialVersionUID = 1L;
	@Unmapped
	public static final String TITLE_PROP = PREFIX + "." + TITLE;
	@Unmapped
	public static final String TITLE_ID_PROP = PREFIX + "." + TITLE_ID;
	@Unmapped
	public static final String PROP_COLOR = PREFIX + "." + COLOR;
	@Unmapped
	public static final String PROP_SELECTED_COLOR = PREFIX + "." + SELECTED_COLOR;
	@Unmapped
	public static final String PROP_ENABLED = PREFIX + "." + ENABLED;
	@Unmapped
	public static final String PROP_IMAGE = PREFIX + "." + IMAGE;

	private Boolean enabled;

	private String title;

	@Review(note = "Is this propery specific to iphone or certain property values are iphone specific?")
	@EnumValues(type = "integer", values = { "Titanium.UI.iPhone.SystemButtonStyle.BORDERED",
			"Titanium.UI.iPhone.SystemButtonStyle.DONE" })
	private String style;

	private String color;

	private String selectedColor;

	private String image;

	private String titleid;

	public Button() {
		this.type = "Titanium.UI.Button";
	}

	@Override
	public void setName(String name) {
		String oldName = getName();
		super.setName(name);
		if (oldName == null) {
			setTitle(name);
		}
	}

	/**
	 * @param title
	 *            the title to set
	 */
	public void setTitle(String title) {
		String oldTitle = this.title;
		this.title = title;
		listeners.firePropertyChange(TITLE_PROP, oldTitle, title);
	}

	/**
	 * Setting the color value of this button.
	 * 
	 * @param color
	 */
	public void setColor(String color) {
		String oldColor = this.color;
		this.color = color;
		listeners.firePropertyChange(PROP_COLOR, oldColor, color);
	}

	public String getColor() {
		return this.color;
	}

	public String getImage() {
		return image;
	}

	public void setImage(String image) {
		String oldImage = this.image;
		this.image = image;
		listeners.firePropertyChange(PROP_IMAGE, oldImage, image);
	}

	/**
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	public Boolean getEnabled() {
		return enabled;
	}

	public void setEnabled(Boolean enabled) {
		Boolean old = this.enabled;
		this.enabled = enabled;

		listeners.firePropertyChange(PROP_ENABLED, old, enabled);
	}

	@Unmapped
	private static String[] styles = new String[] { "", "Done", "Bordered" };

	@Override
	protected boolean isColorFieldName(String fieldName) {
		if (COLOR.equals(fieldName) || SELECTED_COLOR.equals(fieldName)) {
			return true;
		} else {
			return super.isColorFieldName(fieldName);
		}
	}

	@Override
	protected boolean isImageFieldName(String fieldName) {
		boolean res = false;
		if (IMAGE.equals(fieldName)) {
			res = true;
		}
		if (!res) {
			res = super.isImageFieldName(fieldName);
		}
		return res;
	}

	/**
	 * Do the color property stuff here.
	 */
	@Override
	protected void handleProperty(ArrayList<IPropertyDescriptor> descriptors, String fieldName, Class<?> fieldType,
			Field f) {
		// Adding the color property descriptor here for the button.
		if (STYLE.equals(fieldName)) {
			descriptors.add(new ComboBoxPropertyDescriptor(f, fieldName, styles));
		}
		super.handleProperty(descriptors, fieldName, fieldType, f);
	}

	@Override
	protected Object handlePropertyGetValue(String fieldName, Object value) {
		Object retValue = super.handlePropertyGetValue(fieldName, value);
		if (retValue != null) {
			return retValue;
		}
		if (STYLE.equals(fieldName)) {
			return style == null ? 0 : styles[1].equals(style) ? 1 : 2;
		}
		return null;
	}

	@Override
	protected Object handlePropertySetValue(String fieldName, Object value) {
		Object retValue = super.handlePropertySetValue(fieldName, value);
		if (retValue != null) {
			return retValue;
		}
		if (STYLE.equals(fieldName)) {
			if (value instanceof Integer && (Integer) value > 0) {
				setStyle(styles[(Integer) value]);
			} else {
				setStyle(null);
			}
		}
		return null;
	}

	/**
	 * @return the style
	 */
	public String getStyle() {
		return style;
	}

	/**
	 * @param style
	 *            the style to set
	 */
	public void setStyle(String style) {
		this.style = style;
	}

	/**
	 * @return the selectedColor
	 */
	public String getSelectedColor() {
		return selectedColor;
	}

	/**
	 * @param selectedColor
	 *            the selectedColor to set
	 */
	public void setSelectedColor(String selectedColor) {
		this.selectedColor = selectedColor;
	}

	/**
	 * @return the titleid
	 */
	public String getTitleid() {
		return titleid;
	}

	/**
	 * @param titleid
	 *            the titleid to set
	 */
	public void setTitleid(String titleid) {
		String oldTitleId = this.titleid;
		this.titleid = titleid;
		listeners.firePropertyChange(TITLE_ID_PROP, oldTitleId, titleid);
	}

}