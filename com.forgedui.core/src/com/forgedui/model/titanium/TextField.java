/**
 *
 */
package com.forgedui.model.titanium;

import com.forgedui.model.titanium.annotations.Review;
import com.forgedui.model.titanium.annotations.SupportedPlatform;
import com.forgedui.model.titanium.annotations.Unmapped;

/**
 * @AutoGenerated
 * 
 * Text field extends container because it has certain children
 * Note: those children are placed in specific locations... 
 * 
 */
public class TextField extends TitaniumUIElement {

	@Unmapped
	public static final String PRO_RIGHT_BUTTON = "Titanium.UI.TextField.rightButton";
	@Unmapped	
	public static final String PRO_LEFT_BUTTON = "Titanium.UI.TextField.leftButton";
	
	@Unmapped
	public static final String PRO_TOOLBAR = "Titanium.UI.TextField.toolBar";
	
	@Unmapped
	public static final String PRO_KEYBOARD_TOOLBAR_COLOR = "keyboardToolbarColor";
	
	@Unmapped
	public static final String HINT_TEXT = "Titanium.UI.TextField.hintText";
	
	private Boolean enabled;

	private Integer borderStyle;

	private String hintText = "Textfield";

	private Boolean suppressReturn;

	private Integer clearButtonMode;

	private Integer minimumFontSize;

	private String verticalAlign;

	private Integer leftButtonMode;

	@Review(note="What is this ?")
	private TitaniumUIBoundedElement rightButton;

	private Boolean editable;

	private Float paddingLeft;

	private Integer rightButtonMode;

	private Float paddingRight;

	@Review(note="What the hell is this?")
	private TitaniumUIBaseElement[] keyboardToolbar;

	private Float keyboardToolbarHeight;

	@Review(note="Whjat")
	private TitaniumUIBoundedElement leftButton;

	private Float leftButtonPadding;

	private Boolean clearOnEdit;

	private String value;

	@SupportedPlatform(platforms={"iphone", "ipad"})
	private String keyboardToolbarColor;
	
	private KeyboardType keyboardType;

	private Float rightButtonPadding;

	public TextField() {
		type="Titanium.UI.TextField";
	}
	
	protected String getObjectName() {
		return "Titanium.UI.TextField";
	}

	public TitaniumUIBoundedElement getRightButton() {
		return rightButton;
	}

	public void setRightButton(TitaniumUIBoundedElement rightButton) {
		TitaniumUIBoundedElement oldValue = this.rightButton;
		this.rightButton = rightButton;
		fireElementPropertySet(PRO_RIGHT_BUTTON, oldValue, rightButton);
	}

	public TitaniumUIBaseElement[] getKeyboardToolbar() {
		return keyboardToolbar;
	}

	public void setKeyboardToolbar(TitaniumUIBaseElement[] keyboardToolbar) {
		TitaniumUIBaseElement[] oldToolbars = this.keyboardToolbar;
		this.keyboardToolbar = keyboardToolbar;
		
		listeners.firePropertyChange(PRO_TOOLBAR, oldToolbars, keyboardToolbar);
	}

	public TitaniumUIBoundedElement getLeftButton() {
		return leftButton;
	}

	public void setLeftButton(TitaniumUIBoundedElement leftButton) {
		TitaniumUIBoundedElement oldValue = this.leftButton;
		this.leftButton = leftButton;
		fireElementPropertySet(PRO_LEFT_BUTTON, oldValue, leftButton);
	}

	/**
	 * @return the enabled
	 */
	public Boolean getEnabled() {
		return enabled;
	}

	/**
	 * @param enabled the enabled to set
	 */
	public void setEnabled(Boolean enabled) {
		this.enabled = enabled;
	}

	/**
	 * @return the borderStyle
	 */
	public Integer getBorderStyle() {
		return borderStyle;
	}

	/**
	 * @param borderStyle the borderStyle to set
	 */
	public void setBorderStyle(Integer borderStyle) {
		this.borderStyle = borderStyle;
	}

	/**
	 * @return the hintText
	 */
	public String getHintText() {
		return hintText;
	}

	/**
	 * @param hintText the hintText to set
	 */
	public void setHintText(String hintText) {
		String oldText = this.hintText;
		this.hintText = hintText;
		listeners.firePropertyChange(HINT_TEXT, oldText, hintText);
	}

	/**
	 * @return the suppressReturn
	 */
	public Boolean getSuppressReturn() {
		return suppressReturn;
	}

	/**
	 * @param suppressReturn the suppressReturn to set
	 */
	public void setSuppressReturn(Boolean suppressReturn) {
		this.suppressReturn = suppressReturn;
	}

	/**
	 * @return the clearButtonMode
	 */
	public Integer getClearButtonMode() {
		return clearButtonMode;
	}

	/**
	 * @param clearButtonMode the clearButtonMode to set
	 */
	public void setClearButtonMode(Integer clearButtonMode) {
		this.clearButtonMode = clearButtonMode;
	}

	/**
	 * @return the minimumFontSize
	 */
	public Integer getMinimumFontSize() {
		return minimumFontSize;
	}

	/**
	 * @param minimumFontSize the minimumFontSize to set
	 */
	public void setMinimumFontSize(Integer minimumFontSize) {
		this.minimumFontSize = minimumFontSize;
	}

	/**
	 * @return the verticalAlign
	 */
	public String getVerticalAlign() {
		return verticalAlign;
	}

	/**
	 * @param verticalAlign the verticalAlign to set
	 */
	public void setVerticalAlign(String verticalAlign) {
		this.verticalAlign = verticalAlign;
	}

	/**
	 * @return the leftButtonMode
	 */
	public Integer getLeftButtonMode() {
		return leftButtonMode;
	}

	/**
	 * @param leftButtonMode the leftButtonMode to set
	 */
	public void setLeftButtonMode(Integer leftButtonMode) {
		this.leftButtonMode = leftButtonMode;
	}

	/**
	 * @return the editable
	 */
	public Boolean getEditable() {
		return editable;
	}

	/**
	 * @param editable the editable to set
	 */
	public void setEditable(Boolean editable) {
		this.editable = editable;
	}

	/**
	 * @return the paddingLeft
	 */
	public Float getPaddingLeft() {
		return paddingLeft;
	}

	/**
	 * @param paddingLeft the paddingLeft to set
	 */
	public void setPaddingLeft(Float paddingLeft) {
		this.paddingLeft = paddingLeft;
	}

	/**
	 * @return the rightButtonMode
	 */
	public Integer getRightButtonMode() {
		return rightButtonMode;
	}

	/**
	 * @param rightButtonMode the rightButtonMode to set
	 */
	public void setRightButtonMode(Integer rightButtonMode) {
		this.rightButtonMode = rightButtonMode;
	}

	/**
	 * @return the paddingRight
	 */
	public Float getPaddingRight() {
		return paddingRight;
	}

	/**
	 * @param paddingRight the paddingRight to set
	 */
	public void setPaddingRight(Float paddingRight) {
		this.paddingRight = paddingRight;
	}

	/**
	 * @return the keyboardToolbarHeight
	 */
	public Float getKeyboardToolbarHeight() {
		return keyboardToolbarHeight;
	}

	/**
	 * @param keyboardToolbarHeight the keyboardToolbarHeight to set
	 */
	public void setKeyboardToolbarHeight(Float keyboardToolbarHeight) {
		this.keyboardToolbarHeight = keyboardToolbarHeight;
	}

	/**
	 * @return the leftButtonPadding
	 */
	public Float getLeftButtonPadding() {
		return leftButtonPadding;
	}

	/**
	 * @param leftButtonPadding the leftButtonPadding to set
	 */
	public void setLeftButtonPadding(Float leftButtonPadding) {
		this.leftButtonPadding = leftButtonPadding;
	}

	/**
	 * @return the clearOnEdit
	 */
	public Boolean getClearOnEdit() {
		return clearOnEdit;
	}

	/**
	 * @param clearOnEdit the clearOnEdit to set
	 */
	public void setClearOnEdit(Boolean clearOnEdit) {
		this.clearOnEdit = clearOnEdit;
	}

	/**
	 * @return the value
	 */
	public String getValue() {
		return value;
	}

	/**
	 * @param value the value to set
	 */
	public void setValue(String value) {
		this.value = value;
	}

	/**
	 * @return the keyboardToolbarColor
	 */
	public String getKeyboardToolbarColor() {
		return keyboardToolbarColor;
	}

	/**
	 * @param keyboardToolbarColor the keyboardToolbarColor to set
	 */
	public void setKeyboardToolbarColor(String keyboardToolbarColor) {
		this.keyboardToolbarColor = keyboardToolbarColor;
	}

	/**
	 * @return the rightButtonPadding
	 */
	public Float getRightButtonPadding() {
		return rightButtonPadding;
	}

	/**
	 * @param rightButtonPadding the rightButtonPadding to set
	 */
	public void setRightButtonPadding(Float rightButtonPadding) {
		this.rightButtonPadding = rightButtonPadding;
	}
	
	@Override
	protected boolean isColorFieldName(String fieldName) {
		if (PRO_KEYBOARD_TOOLBAR_COLOR.equals(fieldName)) {
			return true;
		} else {
			return super.isColorFieldName(fieldName);
		}
	}

	public void setKeyboardType(KeyboardType keyboardType) {
		this.keyboardType = keyboardType;
	}

	public KeyboardType getKeyboardType() {
		return keyboardType;
	}
}