/**
 *
 */
package com.forgedui.model.titanium;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.eclipse.ui.views.properties.IPropertyDescriptor;

import com.forgedui.model.property.MinmaxValidator;
import com.forgedui.model.property.NumberCellEditor;
import com.forgedui.model.property.NumberPropertyDescriptor;

/**
 * @AutoGenerated
 */
public class PickerColumn extends TitaniumUIContainer {

	private static final String PROP_ROWS = "rowCount";

	protected String getObjectName() {
		return "Titanium.UI.PickerRow";
	}

	public void setRowCount(int num) {
		for (int i = children.size() - 1; i >= num; i--) {
			removeChild(children.get(i));
		}
		for (int i = children.size(); children.size() < num; i++) {
			PickerRow child = new PickerRow();
			addChild(child);
			child.initDefaults();
		}
	}
	
	@Override
	public void initDefaults() {
		super.initDefaults();
		setRowCount(1);
	}
	
	@Override
	public List<? extends PickerRow> getChildren() {
		return (List<? extends PickerRow>) super.getChildren();
	}

	@Override
	public IPropertyDescriptor[] getPropertyDescriptors() {
		List<IPropertyDescriptor> fullList = new ArrayList<IPropertyDescriptor>();
		fullList.addAll(Arrays.asList(super.getPropertyDescriptors()));
		NumberPropertyDescriptor npd = new NumberPropertyDescriptor(PROP_ROWS, PROP_ROWS, NumberCellEditor.INTEGER,
				false);
		npd.setValidator(new MinmaxValidator(1, 30));
		fullList.add(npd);

		return fullList.toArray(new IPropertyDescriptor[fullList.size()]);
	}

	@Override
	public void resetPropertyValue(Object id) {
		if (PROP_ROWS.equals(id)) {
			setRowCount(1);
		} else
			super.resetPropertyValue(id);
	}

	@Override
	public Object getPropertyValue(Object propertyId) {
		if (PROP_ROWS.equals(propertyId)) {
			return "" + children.size();
		}
		return super.getPropertyValue(propertyId);
	}

	@Override
	public void setPropertyValue(Object propertyId, Object value) {
		if (PROP_ROWS.equals(propertyId)) {
			if (canEdit())
				setRowCount((Integer) value);
		} else {
			super.setPropertyValue(propertyId, value);
		}
	}

	@Override
	public Picker getParent() {
		return (Picker) super.getParent();
	}

	public boolean canEdit() {
		return getParent() != null && getParent().canEdit();
	}

}