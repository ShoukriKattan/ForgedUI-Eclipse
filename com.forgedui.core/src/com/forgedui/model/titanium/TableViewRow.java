/**
 *
 */
package com.forgedui.model.titanium;

import com.forgedui.model.titanium.TitaniumUIElement.EnumType;
import com.forgedui.model.titanium.annotations.SupportedPlatform;
import com.forgedui.model.titanium.annotations.Unmapped;

/**
 * @AutoGenerated
 */
public class TableViewRow extends TitaniumUIContainer {

	private static final long serialVersionUID = 1L;

	@Unmapped
	public static String TITLE_PROP = "TableViewRow.title";

	// Extra constants for the attributes.
	@Unmapped
	public static String PROP_SELECTED_BACKGROUND_COLOR = "selectedBackgroundColor";
	@Unmapped
	public static String PROP_COLOR = "color";
	@Unmapped
	public static String PROP_SELECTED_COLOR = "selectedColor";
	@Unmapped
	public static String PROP_SELECTED_BACKGROUND_IMAGE = "selectedBackgroundImage";
	@Unmapped
	public static String PROP_RIGHT_IMAGE = "rightImage";
	@Unmapped
	public static String PROP_LEFT_IMAGE = "leftImage";
	@Unmapped
	public static String PROP_HAS_CHECK = "hasCheck";
	@Unmapped
	public static String PROP_HAS_CHILD = "hasChild";
	@Unmapped
	public static String PROP_HAS_DETAIL = "hasDetail";
	@Unmapped
	public static String PROP_INDENTATION_LEVEL = "indentationLevel";

	private String selectedBackgroundImage;

	private String rightImage;

	private String selectedBackgroundColor;

	@SupportedPlatform(platforms={"iphone", "ipad"})
	private SelectionStyle selectionStyle;

	private String title;

	private String color;

	@SupportedPlatform(platforms={"iphone", "ipad"})
	private Integer indentionLevel;

	@SupportedPlatform(platforms={"iphone", "ipad"})
	private String selectedColor;

	private String layout;

	private Boolean hasCheck;

	private Boolean hasChild;

	@SupportedPlatform(platforms={"iphone", "ipad"})
	private Boolean hasDetail;

	private String className;

	private String leftImage;

	public TableViewRow() {
		type = "Titanium.UI.TableViewRow";
	}

	protected String getObjectName() {
		return "Titanium.UI.TableViewRow";
	}

	@Override
	public void setName(String name) {
		String oldName = getName();
		super.setName(name);
		if (oldName == null) {
			setTitle("Row");
		}
	}

	/**
	 * @param title
	 *            the title to set
	 */
	public void setTitle(String title) {
		String oldTitle = this.title;
		this.title = title;
		listeners.firePropertyChange(TITLE_PROP, oldTitle, title);
	}

	public String getSelectedBackgroundImage() {
		return selectedBackgroundImage;
	}

	public void setSelectedBackgroundImage(String selectedBackgroundImage) {
		String oldImage = this.selectedBackgroundImage;
		this.selectedBackgroundImage = selectedBackgroundImage;
		listeners.firePropertyChange(PROP_SELECTED_BACKGROUND_IMAGE, oldImage, selectedBackgroundImage);
	}

	public String getRightImage() {
		return rightImage;
	}

	public void setRightImage(String rightImage) {
		String oldImage = this.rightImage;
		this.rightImage = rightImage;
		listeners.firePropertyChange(PROP_RIGHT_IMAGE, oldImage, rightImage);
	}

	public String getSelectedBackgroundColor() {
		return selectedBackgroundColor;
	}

	public void setSelectedBackgroundColor(String selectedBackgroundColor) {
		String oldColor = this.selectedBackgroundColor;
		this.selectedBackgroundColor = selectedBackgroundColor;

		listeners.firePropertyChange(PROP_SELECTED_BACKGROUND_COLOR, oldColor, selectedBackgroundColor);
	}

	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		String oldColor = this.color;
		this.color = color;
		listeners.firePropertyChange(PROP_COLOR, oldColor, color);
	}

	public String getSelectedColor() {
		return selectedColor;
	}

	public void setSelectedColor(String selectedColor) {
		String oldColor = this.selectedColor;
		this.selectedColor = selectedColor;
		listeners.firePropertyChange(PROP_SELECTED_COLOR, oldColor, selectedColor);

	}

	public String getLeftImage() {
		return leftImage;
	}

	public void setLeftImage(String leftImage) {
		String oldImage = this.leftImage;
		this.leftImage = leftImage;
		listeners.firePropertyChange(PROP_LEFT_IMAGE, oldImage, leftImage);
	}

	/**
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	@Override
	protected boolean isColorFieldName(String fieldName) {
		boolean res = false;
		if (PROP_COLOR.equals(fieldName) || PROP_SELECTED_COLOR.equals(fieldName)
				|| PROP_SELECTED_BACKGROUND_COLOR.equals(fieldName)) {
			res = true;
		}
		if (!res) {
			res = super.isColorFieldName(fieldName);
		}
		return res;
	}

	@Override
	protected boolean isImageFieldName(String fieldName) {
		boolean res = false;
		if (PROP_LEFT_IMAGE.equals(fieldName) || PROP_RIGHT_IMAGE.equals(fieldName)
				|| PROP_SELECTED_BACKGROUND_IMAGE.equals(fieldName)) {
			res = true;
		}
		if (!res) {
			res = super.isImageFieldName(fieldName);
		}
		return res;
	}

	/**
	 * @return the hasDetail
	 */
	public Boolean getHasDetail() {
		return hasDetail;
	}

	/**
	 * @param hasDetail
	 *            the hasDetail to set
	 */
	public void setHasDetail(Boolean hasDetail) {
		Boolean old = this.hasDetail;
		this.hasDetail = hasDetail;
		listeners.firePropertyChange(PROP_HAS_DETAIL, old, hasDetail);
	}

	/**
	 * @return the selectionStyle
	 */
	public SelectionStyle getSelectionStyle() {
		return selectionStyle;
	}

	/**
	 * @param selectionStyle
	 *            the selectionStyle to set
	 */
	public void setSelectionStyle(SelectionStyle selectionStyle) {
		this.selectionStyle = selectionStyle;
	}

	/**
	 * @return the hasCheck
	 */
	public Boolean getHasCheck() {
		return hasCheck;
	}

	/**
	 * @param hasCheck
	 *            the hasCheck to set
	 */
	public void setHasCheck(Boolean hasCheck) {
		Boolean old = this.hasCheck;
		this.hasCheck = hasCheck;
		listeners.firePropertyChange(PROP_HAS_CHECK, old, hasCheck);
	}

	/**
	 * @return the indentionLevel
	 */
	public Integer getIndentionLevel() {
		return indentionLevel;
	}

	/**
	 * @param indentionLevel
	 *            the indentionLevel to set
	 */
	public void setIndentionLevel(Integer indentionLevel) {
		Integer oldValue = this.indentionLevel;
		this.indentionLevel = indentionLevel;
		listeners.firePropertyChange(PROP_INDENTATION_LEVEL, oldValue, indentionLevel);
	}

	/**
	 * @return the layout
	 */
	public String getLayout() {
		return layout;
	}

	/**
	 * @param layout
	 *            the layout to set
	 */
	public void setLayout(String layout) {
		this.layout = layout;
	}

	/**
	 * @return the hasChild
	 */
	public Boolean getHasChild() {
		return hasChild;
	}

	/**
	 * @param hasChild
	 *            the hasChild to set
	 */
	public void setHasChild(Boolean hasChild) {
		Boolean old = this.hasChild;
		this.hasChild = hasChild;
		listeners.firePropertyChange(PROP_HAS_CHILD, old, hasChild);
	}

	/**
	 * @return the className
	 */
	public String getClassName() {
		return className;
	}

	/**
	 * @param className
	 *            the className to set
	 */
	public void setClassName(String className) {
		this.className = className;
	}
	
	public static enum SelectionStyle implements EnumType{
		BLUE,
		GRAY,
		NONE;
		
		public String getQDN() {
			return "Titanium.UI.iPhone.TableViewCellSelectionStyle." + super.toString();
		};
	}

}